---

---
<canvas id="canvas" width="500" height="500" />

<script id="vertexShader" type="x-shader/x-vertex">
  #version 300 es

  in vec4 vertexPosition;

  void main() {
    gl_Position = vertexPosition;
  }
</script>

<script id="fragmentShader" type="x-shader/x-fragment">
  #version 300 es
  precision highp float;

  uniform vec2 canvasSize;
  uniform float u_time;
  out vec4 fragColor;

  void main() {
    vec2 coord = gl_FragCoord.xy/canvasSize.xy;

    float red = coord.x * sin(u_time /5.) +0.8; 
    float green = coord.y *cos(u_time /7.) +0.6;
    float blue = -coord.x *sin(u_time /10.) +0.5;
    
    fragColor = vec4(red, green, blue, 0.7);
  }
</script>

<script>
    // Requires a WebGL2-compatible browser: https://caniuse.com/?search=webgl2
// Confirm your compatibility: https://get.webgl.org/webgl2/
// Older versions of Safari (iOS/MacOS) may need to enable WebGL2 under "Experimental Features"

// More WebGL2 demos: https://codepen.io/collection/aMoEeq

const gl = canvas.getContext("webgl2");
if (!gl) throw "WebGL2 not supported";

function createShader(type, sourceCode) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, sourceCode.trim());
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    throw gl.getShaderInfoLog(shader);
  }
  return shader;
}

const program = gl.createProgram();
gl.attachShader(program, createShader(gl.VERTEX_SHADER, vertexShader.textContent));
gl.attachShader(program, createShader(gl.FRAGMENT_SHADER, fragmentShader.textContent));
gl.linkProgram(program);
if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
  throw gl.getProgramInfoLog(program);
}
gl.useProgram(program);

const vertices = [
  [-1, -1],
  [1, -1],
  [-1, 1],
  [1, 1],
];
gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices.flat()), gl.STATIC_DRAW);

const vertexPosition = gl.getAttribLocation(program, "vertexPosition");
gl.enableVertexAttribArray(vertexPosition);
gl.vertexAttribPointer(vertexPosition, vertices[0].length, gl.FLOAT, false, 0, 0);

gl.uniform2f(
  gl.getUniformLocation(program, 'canvasSize'),
  canvas.width, canvas.height
);


function renderLoop(timeStamp){
  gl.uniform1f(gl.getUniformLocation(program, "u_time"), timeStamp/800.0);
 gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length);
  
  //recursive invocation
  window.requestAnimationFrame(renderLoop);
}

window.requestAnimationFrame(renderLoop);
</script>
<style>
    body {
  text-align: center;
  background-color: #EDEDED;
}
canvas {
  max-width: 100%; 
  max-height: 100%;
  border-radius: 50%;
  filter: blur(100px);
}
</style>